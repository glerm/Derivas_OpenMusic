; OM File Header - Saved 2013/11/08 20:31:01
; (6.070004 :patc (om-make-point 10 60) (om-make-point 0 0) (om-make-point 1274 635) "" 183 0 "2013/11/04 11:10:40" "2013/11/08 20:31:01")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Processamento_Gambiarra" (quote ((om-load-boxcomment "comment 6" (om-make-point 619 33) (quote "estla lista sera parseada em para uma lista python tipo nota=[3800, 5000, 5600, etc.]") "" (om-make-point 315 620) nil (om-make-color 0 0 0) (om-make-font "Bitstream Vera Sans" 12 :family "Bitstream Vera Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 148 44) (quote "Copyleft$Glerm Soares 2013") "" (om-make-point 1107 38) nil (om-make-color 0 0 0) (om-make-font "Courier 10 Pitch" 12.0D0 :family "Courier 10 Pitch" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 50 71) (quote "3") "" (om-make-point 651 366) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 48.0D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 50 71) (quote "0") "" (om-make-point 850 495) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 48.0D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 50 71) (quote "2") "" (om-make-point 23 92) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 48.0D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 50 71) (quote "1") "" (om-make-point 8 325) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 48.0D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 348 467) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 72 27) (quote "original") "" (om-make-point 323 536) nil (om-make-color 0 0 0) (om-make-font "Bitstream Vera Sans" 12 :family "Bitstream Vera Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 319 567) (om-make-point 612 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 592 23) "(3800 5000 5600 6200 6700 6800 7900 8000 9100 9100 8000 7900 6800 6700 6200 5600 5000 3800)" :font (om-make-font "DejaVu Sans" 11.0D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote lispfun) "WRITE-TO-STRING" (quote write-to-string) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil))) (om-make-point 460 486) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 298 403) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1200) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1200))) (om-make-point 622 247) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE 2" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 490 269) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1200))) (om-make-point 636 333) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "inverso" (om-load-patch-abs1 "inverso" (quote ((om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 130 184) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 89 54) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" -1))) (om-make-point 188 146) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 176 82) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 98 132) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 121 279) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 86 0) "" nil nil nil))) (quote ((4 0 0 0 nil 0) (2 0 0 1 nil 0) (6 0 1 0 nil 0) (3 0 2 0 nil 0) (1 0 3 0 nil 0) (1 0 4 0 nil 0) (0 0 5 0 nil 0))) 6.070004 nil "" (om-make-point 0 0) (om-make-point 500 377)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 574 284) (om-make-point 50 68) (list (list 6900 8800 5100 7600 4000 7000 2800 5800 1600 4700 2700 5900 3900 7100 4500 8200 5700 10000)) nil "inverso") (om-load-boxcomment "comment 2" (om-make-point 239 117) (quote "montada a lista podemos então $usar metodos python pra processar:$Ex.$gambiarra em  python para aumentar$toda nota numa posição par para$uma oitava+5J (+1900)$") "" (om-make-point 47 340) nil (om-make-color 0 0 0) (om-make-font "Bitstream Vera Sans" 12 :family "Bitstream Vera Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 330 58) (quote "gambiarra em  python para converter$uma lista de python $para uma lista lisp (reversa) ja montada") "" (om-make-point 78 12) nil (om-make-color 0 0 0) (om-make-font "Bitstream Vera Sans" 12 :family "Bitstream Vera Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 75)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 688 262) (om-make-point 146 172) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9300) (11200) (7500) (10000) (6400) (9400) (5200) (8200) (4000) (7100) (5100) (8300) (6300) (9500) (6900) (10600) (8100) (12400))) :lonset (quote (0 75 150 225 300 375 450 525 600 675 750 825 900 975 1050 1125 1200 1275 2275)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackmidi) 1 nil 1000 0 (om-make-point 907 498) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 81 197) (om-make-point 625 32) (list 3800 8100 5600 9300 6700 9900 7900 11100 9100 12200 8000 11000 6800 9800 6200 8700 5000 6900) "(3800 8100 5600 9300 6700 9900 7900 11100 9100 12200 8000 11000 6800 9800 6200 8700 5000 6900 )" nil) (om-load-boxcomment "comment" (om-make-point 273 134) (quote ">>> chordlist=\"\"$>>> for i in notas:$...     chordlist=str(i)+\" \"+chordlist$>>> chordlist=\"(\"+chordlist+\")\"$>>> print chordlist$(3800 8100 5600 9300 6700 9900 7900 11100 9100 12200 8000 11000 6800 9800 6200 8700 5000 6900 )$") "" (om-make-point 78 70) nil (om-make-color 0 0 0) (om-make-font "Bitstream Vera Sans" 12 :family "Bitstream Vera Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 248 199) (quote ">>> x=0$>>> $>>> for i in notas:$...     if (x%2==0):$...             notas[x]=i+1900$...     x=x+1$... $>>> notas$[6900, 5000, 8700, 6200, 9800, 6800, 11000, 8000, 12200, 9100, 11100, 7900, 9900, 6700, 9300, 5600, 8100, 3800]$") "" (om-make-point 39 452) nil (om-make-color 0 0 0) (om-make-font "Bitstream Vera Sans" 12 :family "Bitstream Vera Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 75)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 857 266) (om-make-point 146 172) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((2600) (6900) (4400) (8100) (5500) (8700) (6700) (9900) (7900) (11000) (6800) (9800) (5600) (8600) (5000) (7500) (3800) (5700))) :lonset (quote (0 75 150 225 300 375 450 525 600 675 750 825 900 975 1050 1125 1200 1275 2275)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackmidi) 1 nil 1000 0 (om-make-point 705 428) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 75)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1056 408) (om-make-point 146 172) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3800) (5000) (5600) (6200) (6700) (6800) (7900) (8000) (9100) (9100) (8000) (7900) (6800) (6700) (6200) (5600) (5000) (3800))) :lonset (quote (0 75 150 225 300 375 450 525 600 675 750 825 900 975 1050 1125 1200 1275 2275)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackmidi) 1 nil 1000 0 (om-make-point 705 628) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (quote ((10 0 6 0 nil 5) (9 0 8 0 nil 5) (6 0 9 0 nil 5) (22 1 10 0 ((om-make-point 1086 578) (om-make-point 952 666) (om-make-point 921 492) (om-make-point 315 403)) 5) (18 0 11 0 nil 2) (18 0 12 0 nil 2) (14 0 13 0 nil 2) (12 0 14 0 nil 2) (13 0 17 1 nil 2) (11 0 21 1 ((om-make-point 630 280) (om-make-point 675 235) (om-make-point 760 261) (om-make-point 889 261) (om-make-point 889 266)) 2))) nil 6.070004))
