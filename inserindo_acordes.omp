; OM File Header - Saved 2013/11/11 0:00:47
; (6.070004 :patc (om-api:om-make-point 226 10) (om-api:om-make-point 0 0) (om-api:om-make-point 1280 727) "" 183 0 "2013/11/10 21:35:17" "2013/11/10 23:56:42")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "inserindo_acordes" (quote ((om-load-boxcall (quote abstraction) "oitavador" (om-load-patch-abs1 "oitavador" (quote ((om-load-boxout "output" 0 (om-make-point 73 297) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 89 249) nil nil nil nil 1) (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 223 138) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 197 95) (om-make-point 171 32) (list -2400 -1200 0 1200 2400) "(-2400 -1200 0 1200 2400)" nil))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (4 0 3 0 nil 0))) 6.070004 nil "" (om-make-point 200 200) (om-make-point 1280 727)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 814 559) nil nil "l" "oitavador") (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 890 627) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 218 615) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 458 531) (om-make-point 27 32) 1 "1" nil) (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 444 561) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 148 647) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N 3" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 413 628) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 38 548) nil nil nil nil 1) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 42) (om-load-inputfun (quote input-funbox) "step" "STEP" 3))) (om-make-point 122 568) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LIST-EXPLODE" (quote list-explode) (quote ((om-load-inputfun (quote input-funbox) "List" "LIST" (list 1 2 3 4 5 6)) (om-load-inputfun (quote input-funbox) "segment size" "NLISTS" 2))) (om-make-point 488 633) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 906 553) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SUBS-POSN" (quote subs-posn) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIS1" (list 0 1 2 3)) (om-load-inputfun (quote input-funbox) "a list of indices" "POSN" (list 1 3)) (om-load-inputfun (quote input-funbox) "a list or value" "VAL" (list (quote a) (quote b))))) (om-make-point 280 543) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 380 101) (om-make-point 59 32) 1.1111 "1.1111" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 271 138) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 2))) (om-make-point 319 116) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 114 286) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 316 312) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 299 210) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 461 116) (om-make-point 27 32) 7 "7" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 53 175) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 206 294) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 225 66) (om-make-point 178 32) (list 250 300 250 250 125 300) "(250 300 250 250 125 300 )" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 86 29) (om-make-point 216 32) (list 6000 6200 6000 6400 6600 6900) "(6000 6200 6000 6400 6600 6900)" nil) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 135 407) (om-make-point 714 118) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6900 7400) (6200) (6000) (4800 9000 5200) (6600) (6900) (5000 9300 6400) (6200) (6000) (6000 4800 5400) (6600) (6900) (8400 6600 7200) (6200) (6000) (8800 6200 9300) (6600) (6900) (9300 6000 6000) (6200) (6000) (3800 7600 4200) (6600) (6900) (6000 8100 5400) (6200) (6000) (4000 8600 8400) (6600) (6900) (8400 8100 5400) (6200) (6000) (3800 6400 6000) (6600) (6900) (5700 6600 7200) (6200) (6000) (5000 5200 7200) (6600) (6900))) :lonset (quote (0 225 495 720 945 1058 1328 1553 1823 2048 2273 2386 2656 2881 3151 3376 3601 3714 3984 4209 4479 4704 4929 5042 5312 5537 5807 6032 6257 6370 6640 6865 7135 7360 7585 7698 7968 8193 8463 8688 8913 9026 10026)) :ldur (quote ((1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000))) :lvel (quote ((100 100 100) (100) (100) (100 100 100) (100) (100) (100 100 100) (100) (100) (100 100 100) (100) (100) (100 100 100) (100) (100) (100 100 100) (100) (100) (100 100 100) (100) (100) (100 100 100) (100) (100) (100 100 100) (100) (100) (100 100 100) (100) (100) (100 100 100) (100) (100) (100 100 100) (100) (100) (100 100 100) (100) (100) (100 100 100) (100) (100))) :loffset (quote ((0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0))) :lchan (quote ((1 1 1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 370 280) 0 1000 nil 1 (quote :jackmidi) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (quote ((0 0 1 0 nil 0) (10 0 1 1 nil 0) (8 0 2 0 nil 0) (6 0 4 0 nil 0) (3 0 4 1 nil 0) (8 0 5 0 nil 0) (9 0 6 0 nil 0) (5 0 6 1 nil 0) (15 0 7 0 nil 0) (7 0 8 1 nil 0) (1 0 9 0 nil 0) (22 0 10 0 nil 0) (15 0 11 0 ((om-make-point 125 344) (om-make-point 156 377) (om-make-point 296 444) (om-make-point 296 543)) 0) (2 0 11 1 nil 0) (4 0 11 2 nil 0) (14 0 13 0 nil 0) (21 0 14 0 nil 0) (12 0 14 1 nil 0) (19 0 15 0 nil 0) (17 0 16 0 nil 0) (13 0 17 0 nil 0) (18 0 17 1 ((om-make-point 473 146) (om-make-point 379 157) (om-make-point 366 191) (om-make-point 337 210)) 0) (22 0 19 0 nil 0) (18 0 19 1 nil 0) (16 0 20 1 nil 0) (11 0 23 1 nil 0) (20 0 23 2 nil 0))) nil 6.070004))
