; OM File Header - Saved 2013/11/11 0:00:47
; (6.070004 :patc (om-api:om-make-point 118 60) (om-api:om-make-point 0 0) (om-api:om-make-point 1274 646) "" 183 0 "2013/09/25 10:19:38" "2013/11/10 23:59:24")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Desordem_estudo1" (quote ((om-load-boxcall (quote genfun) "BAND-FILTER" (quote band-filter) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "a list of (low high) pairs" "BOUNDS" (list (list 0 2) (list 5 10))) (om-load-inputfunmenu1 (quote input-funmenu) "pass or reject" "MODE" (quote reject) (list (list "Reject" (quote (quote reject))) (list "Pass" (quote (quote pass))))))) (om-make-point 514 348) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 529 307) (om-make-point 75 32) (list (list 0 5500)) "((0 5500))" nil) (om-load-boxcall (quote genfun) "REMOVE-DUP 2" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 204 487) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 986 227) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 878 214) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "flat para mais de um acorde?") "" (om-make-point 973 516) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 196 43) (quote "Qual a melhor maneira de isolar acordes?") "" (om-make-point 663 519) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 281 428) nil nil nil nil 1) (om-load-editor-box1 "CHORD 20" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 390 440) (om-make-point 134 102) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 6900 8100 7200 5700 6300 7500)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 400 20) (om-make-point 370 261) 3 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "CHORD 19" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 862 309) (om-make-point 72 129) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 7200 6900 8100 7500)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 2 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD 18" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1058 4) (om-make-point 72 129) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 3100 5600 3200 5700 3300)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD 15" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1058 326) (om-make-point 70 130) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 3200)) :ldur (quote (1000 1000)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD 14" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 985 328) (om-make-point 72 129) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 3100)) :ldur (quote (1000 1000)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD 17" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1187 496) (om-make-point 72 129) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 3100 5600 3200 5700 3300)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote lispfun) "APPEND 2" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1078 494) nil nil nil nil 1) (om-load-editor-box1 "CHORD 16" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1130 323) (om-make-point 70 130) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 3300)) :ldur (quote (1000 1000)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 996 726) nil nil nil nil 1) (om-load-editor-box1 "CHORD 13" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1063 586) (om-make-point 70 130) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD 12" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 980 593) (om-make-point 70 130) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD 11" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 903 594) (om-make-point 70 130) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 3300)) :ldur (quote (1000 1000)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD 10" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 828 589) (om-make-point 70 130) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD 9" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 755 591) (om-make-point 70 130) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD 8" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 680 588) (om-make-point 70 130) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 6300)) :ldur (quote (1000 1000)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD 7" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 605 591) (om-make-point 70 130) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 3200)) :ldur (quote (1000 1000)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD 6" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 528 587) (om-make-point 70 130) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD 5" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 453 585) (om-make-point 70 130) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD 4" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 229 591) (om-make-point 75 127) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD 3" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 151 590) (om-make-point 75 127) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "&" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 379 588) (om-make-point 70 130) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 306 591) (om-make-point 72 129) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 3100)) :ldur (quote (1000 1000)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 334) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS 2" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" 0))) (om-make-point 546 476) nil nil nil nil 13))) (setf (numouts box) 13) box) (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 799 474) nil nil nil nil 1) (let ((newbox (om-load-boxcall (quote genfun) "OM->LILY 2" (quote om->lily) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" (quote t)))) (om-make-point 0 445) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 0 445)) newbox) (om-load-boxcomment "comment 3" (om-make-point 84 28) (quote "assinatura03") "" (om-make-point 453 276) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "dragged 7" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 627 298) (om-make-point 215 142) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5700) (6900) (5500 3100) (7500) (5700) (6300) (5600 3200) (7500 6300) (5500) (7500) (5700 3300) (6900))) :lonset (quote (0 0 250 250 500 500 750 750 1000 1000 1250 1250 1750)) :ldur (quote ((250) (250) (250 250) (250) (250) (250) (250 250) (250 1000) (250) (500) (500 500) (250))) :lvel (quote ((69) (69) (90 95) (69) (69) (69) (90 90) (90 95) (69) (69) (90 95) (69))) :loffset (quote ((0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0))) :lchan (quote ((2) (1) (2 2) (1) (2) (1) (2 2) (1 1) (2) (1) (2 2) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 2 0 (om-make-point 400 20) (om-make-point 621 478) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 48 2)) t nil nil nil) (om-load-editor-box1 "dragged 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 247 257) (om-make-point 188 138) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5800 3400 5800 4600) (6900 8100 3600) (7500 4800) (7200 4800) (7200 4500) (7500 6300) (6300 3300 5700) (6300 7500))) :lonset (quote (0 250 500 750 1000 1250 1500 1750 2498)) :ldur (quote ((248 248 748 748) (748 748 248) (248 248) (248 248) (248 248) (248 248) (248 998 998) (748 748))) :lvel (quote ((69 95 90 90) (95 90 69) (69 69) (69 69) (69 69) (69 69) (69 95 90) (95 90))) :loffset (quote ((0 0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0))) :lchan (quote ((1 2 2 2) (1 1 2) (1 2) (1 2) (1 2) (1 2) (1 2 2) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "dragged 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 0 260) (om-make-point 241 172) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 5700) (6300 3300 5700) (6300 7500 5100) (6300 5100) (6300) (7200 6900 6300) (8100 7500) (7500 3300 5700) (8100 5400) (6900 5700))) :lonset (quote (0 250 500 750 875 1000 1125 1250 1500 1750 1998)) :ldur (quote ((248 248) (248 498 498) (248 623 248) (123 248) (623) (61 60 248) (60 123) (248 498 498) (248 248) (248 248))) :lvel (quote ((69 69) (69 95 90) (95 90 69) (95 69) (69) (69 69 69) (69 69) (69 95 90) (69 69) (69 69))) :loffset (quote ((0 0) (0 0 0) (0 0 0) (0 0) (0) (62 0 0) (63 0) (0 0 0) (0 0) (0 0))) :lchan (quote ((1 2) (1 2 2) (1 1 2) (1 2) (1) (1 1 2) (1 1) (1 2 2) (1 2) (1 2))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 4" (om-make-point 84 28) (quote "assinatura04") "" (om-make-point 72 424) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 84 28) (quote "assinatura01") "" (om-make-point 916 117) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 90 24) (quote "assinatura02") "" (om-make-point 668 273) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "dragged 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 744 54) (om-make-point 164 131) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (7200 6900) (8100 7500) (7500))) :lonset (quote (0 125 250 375 938)) :ldur (quote ((625) (63 813) (62 125) (250))) :lvel (quote ((69) (69 69) (69 69) (69))) :loffset (quote ((0) (62 0) (63 0) (0))) :lchan (quote ((1) (1 1) (1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((1) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((2) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((3) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 642 512) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 9 48) (om-make-point 704 214) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200 6000) (6400) (7600) (7500 6300) (6600) (6300) (6300 7500) (6900) (6900) (6000 6400) (5700 6900 7500) (7500 6300) (7200) (6000) (7200) (6300) (7500 6300) (7500) (7200) (7200) (7500) (6300) (7500 6300) (6000) (6900) (6600) (6900) (6000) (6300) (7500 6300) (6300) (6300) (7200 6900) (8100 7500) (7500) (8100) (6900) (7500) (6300) (7500 6300) (7500) (6900) (7500) (6300) (5800) (6900) (6300) (5800) (7000 5800 8200) (8100) (6900) (6600) (6900) (6000) (5800) (8100 6900) (7500) (7200) (7200) (7500) (6300) (7500 6300) (7200) (6000) (7200) (6300) (7500 6300) (6900) (6900) (6300) (7500 6300) (6600) (6300) (7200 6000) (6000))) :lonset (quote (0 250 375 500 750 1000 1250 1500 1750 1875 2000 2250 2500 2750 3000 3250 3500 3750 4000 4250 4500 4750 5000 5250 5500 5750 6000 6250 6500 6750 7000 7125 7250 7375 7500 7750 8000 8250 8500 8750 9000 9250 9500 9750 9875 10000 10250 10500 10750 11000 11250 11500 11750 12000 12250 12500 12750 13000 13250 13500 13750 14000 14250 14500 14750 15000 15250 15500 15800 16100 16400 16700 17000 17300 17800 18300)) :ldur (quote ((250 250) (125) (125) (500 500) (250) (250) (500 500) (250) (125) (62 63) (250 250 250) (750 750) (250) (250) (250) (250) (250 750) (500) (250) (250) (250) (250) (1000 1000) (250) (250) (250) (250) (250) (250) (625 250) (125) (625) (63 62) (62 125) (250) (250) (250) (250) (250) (250 1000) (500) (250) (250) (125) (125) (250) (250) (250) (250 1000 1000) (250) (250) (250) (250) (250) (250) (750 750) (250) (250) (250) (250) (250) (750 750) (250) (250) (250) (250) (550 550) (300) (300) (300) (600 600) (300) (300) (500 500) (500))) :lvel (quote ((90 95) (95) (69) (90 95) (69) (69) (90 90) (69) (69) (69 69) (69 69 69) (90 95) (69) (69) (69) (69) (90 95) (69) (69) (69) (69) (69) (90 95) (69) (69) (69) (69) (69) (69) (90 95) (95) (69) (69 69) (69 69) (69) (69) (69) (69) (69) (90 95) (69) (69) (69) (69) (69) (69) (69) (69) (95 90 90) (69) (69) (69) (69) (69) (69) (90 95) (69) (69) (69) (69) (69) (90 95) (69) (69) (69) (69) (90 95) (69) (69) (69) (90 95) (69) (69) (90 95) (69))) :loffset (quote ((0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (63 0) (0 0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (62 0) (63 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0))) :lchan (quote ((1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1 1 1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500 3100) (5600) (5100) (4500) (4500) (5100) (5700) (5700) (5700 3300) (3600) (5100) (5400) (5100) (3600) (5700) (5700 3300) (4500) (4800) (4800) (4500) (5700) (5700 3300) (4800) (3600) (4800) (5700) (5700 3300) (5100) (5100) (6300) (5700 3300) (5400) (5700) (5500 3100) (5700) (5600 3200) (5500) (5700 3300) (5400) (6300) (5700 3300) (5100) (5800) (4600) (5700 3300) (4800) (3600) (4800) (3900) (4600 5800 3400) (3600) (4800) (4800) (4500) (6300) (5700 3300) (3600) (5100) (5400) (5100) (3600) (5700) (5700 3300) (3300) (5100) (4500) (4500) (3900) (4500) (3600) (5500 4500))) :lonset (quote (0 250 500 750 1000 1250 1500 1750 2000 2250 2500 2750 3000 3250 3500 3750 4000 4250 4500 4750 5000 5250 5500 5750 6000 6250 6500 6750 7000 7250 7500 7750 8000 8250 8500 8750 9000 9250 9500 9750 10000 10250 10500 10750 11000 11250 11500 11750 12000 12250 12500 12750 13000 13250 13500 13750 14000 14250 14500 14750 15000 15250 15500 15800 16100 16400 16700 17000 17300 17800 18300 22300)) :ldur (quote ((1000 1000) (250) (250) (250) (250) (250) (250) (250) (1000 1000) (250) (250) (250) (250) (250) (250) (750 750) (250) (250) (250) (250) (250) (750 750) (250) (250) (250) (250) (500 500) (250) (250) (250) (500 500) (250) (250) (250 250) (250) (250 250) (250) (500 500) (250) (250) (500 500) (250) (250) (250) (750 750) (250) (250) (250) (250) (750 750 250) (250) (250) (250) (250) (250) (1000 1000) (250) (250) (250) (250) (250) (250) (1200 300) (900) (300) (300) (300) (300) (500) (4500) (4000 4000))) :lvel (quote ((90 95) (69) (69) (69) (69) (69) (69) (69) (90 90) (69) (69) (69) (69) (69) (69) (90 95) (69) (69) (69) (69) (69) (90 95) (69) (69) (69) (69) (90 95) (69) (69) (69) (90 95) (69) (69) (90 95) (69) (90 90) (69) (90 95) (69) (69) (90 95) (69) (69) (69) (90 95) (69) (69) (69) (69) (90 90 95) (69) (69) (69) (69) (69) (90 95) (69) (69) (69) (69) (69) (69) (90 95) (69) (69) (69) (69) (69) (69) (69) (69 69))) :loffset (quote ((0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0))) :lchan (quote ((2 2) (2) (2) (2) (2) (2) (2) (2) (2 2) (2) (2) (2) (2) (2) (2) (2 2) (2) (2) (2) (2) (2) (2 2) (2) (2) (2) (2) (2 2) (2) (2) (2) (2 2) (2) (2) (2 2) (2) (2 2) (2) (2 2) (2) (2) (2 2) (2) (2) (2) (2 2) (2) (2) (2) (2) (2 2 2) (2) (2) (2) (2) (2) (2 2) (2) (2) (2) (2) (2) (2) (2 2) (2) (2) (2) (2) (2) (2) (2) (2 2))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0)) ((0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 2 0 (om-make-point 400 20) (om-make-point 826 471) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf) (quote gf)) 20 2)) t nil nil nil))) (quote ((2 0 0 0 ((om-make-point 240 545) (om-make-point 385 545) (om-make-point 385 343) (om-make-point 507 328) (om-make-point 530 348)) 0) (1 0 0 1 nil 0) (7 0 2 0 nil 0) (4 0 3 0 nil 0) (40 1 4 0 nil 0) (35 1 7 0 nil 0) (0 0 8 1 nil 0) (3 0 9 1 nil 0) (14 0 13 1 nil 0) (12 1 14 0 ((om-make-point 1003 455) (om-make-point 1016 497) (om-make-point 1089 475) (om-make-point 1089 494)) 0) (11 1 14 1 ((om-make-point 1076 454) (om-make-point 1075 466) (om-make-point 1100 467) (om-make-point 1100 494)) 0) (15 1 14 2 nil 0) (30 12 17 1 nil 0) (30 11 18 1 nil 0) (30 10 19 1 nil 0) (30 9 20 1 nil 0) (30 8 21 1 nil 0) (30 7 22 1 nil 0) (30 6 23 1 nil 0) (30 5 24 1 nil 0) (30 4 25 1 nil 0) (30 1 26 1 nil 0) (30 0 27 1 nil 0) (30 3 28 1 nil 0) (30 2 29 1 nil 0) (34 1 30 0 nil 0) (34 1 31 0 nil 0) (36 0 32 0 nil 0))) nil 6.070004))
