; OM File Header - Saved 2013/11/12 9:51:57
; (6.070004 :patc (om-make-point 226 10) (om-make-point 0 0) (om-make-point 515 410) "" 183 0 "2013/11/10 14:13:30" "2013/11/10 15:08:26")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "series" (quote ((om-load-boxcall (quote abstraction) "serie-de-intervalos" (om-load-patch-abs1 "serie-de-intervalos" (quote ((om-load-boxout "output" 0 (om-make-point 184 258) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 191 210) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 31 154) (om-make-point 216 32) (list 4800 5300 6000 6700 7200 8400) "(4800 5300 6000 6700 7200 8400)" nil) (om-load-boxcall (quote genfun) "NTH-RANDOM 2" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 82 184) (om-make-point 74 60) nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 124 91) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 121 62) (om-make-point 184 32) (list 6000 5500 6400 6900 6700) "(6000 5500 6400 6900 6700)" nil) (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 240 148) nil nil nil nil 1))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (6 0 1 1 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0) (4 0 6 0 nil 0))) 6.070004 nil "" (om-make-point 0 0) (om-make-point 400 477)) (quote nil) (om-make-point 415 428) nil nil "l" "serie-de-intervalos") (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" (list 1 1 1 1)))) (om-make-point 504 501) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 819 194) nil nil nil nil 1) (om-load-boxcall (quote genfun) "ROTATE" (quote rotate) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil))) (om-make-point 1061 120) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 877 52) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 90 594) (om-make-point 610 131) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((0) (75) (150) (300) (525) (900) (1500))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :jackmidi) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote lispfun) "REST" (quote rest) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 344 522) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X 2" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 311 461) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 375 391) (om-make-point 34 32) 75 "75" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 315 417) (om-make-point 20 35) nil nil nil 1) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 7 233) (om-make-point 48 32) 6000 "6000" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 102 194) (om-make-point 184 32) (list 6000 6300 6600 6900 7200) "(6000 6300 6600 6900 7200)" nil) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 64 268) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 171 238) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 351 96) (om-make-point 27 32) 2 "2" nil) (om-load-boxcall (quote genfun) "PRIME?" (quote prime?) (quote ((om-load-inputfun (quote input-funbox) "a number" "N" 0))) (om-make-point 325 129) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PRIME-SER" (quote prime-ser) (quote ((om-load-inputfun (quote input-funbox) "max prime" "MAX" 100))) (om-make-point 337 232) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 243 67) (quote "Type your comments here") nil (om-make-point 577 100) nil (om-make-color 0 0 0) (om-make-font "Bitstream Vera Sans" 12 :family "Bitstream Vera Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "TEXT-BOX 4" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 883 483) (om-make-point 37 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 17 23) "3" :font (om-make-font "DejaVu Sans" 11.0D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 844 484) (om-make-point 37 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 17 23) "2" :font (om-make-font "DejaVu Sans" 11.0D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 806 484) (om-make-point 37 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 17 23) "1" :font (om-make-font "DejaVu Sans" 11.0D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 767 485) (om-make-point 37 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 17 23) "0" :font (om-make-font "DejaVu Sans" 11.0D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 856 346) (om-make-point 80 32) (list 0 1 2 3) "( 0 1 2 3  )" nil) (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 820 390) nil nil nil nil 4))) (setf (numouts box) 4) box) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 640 324) (om-make-point 27 32) 8 "8" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 580 293) (om-make-point 27 32) 1 "1" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 531 322) (om-make-point 34 32) 55 "55" nil) (om-load-boxcall (quote genfun) "INHARM-SER" (quote inharm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 1) (om-load-inputfun (quote input-funbox) "distortion" "DIST" 1) (om-load-inputfun (quote input-funbox) "number of elements (partials)" "NPART" 1))) (om-make-point 567 364) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FIBO-SER" (quote fibo-ser) (quote ((om-load-inputfun (quote input-funbox) "a number" "SEED1" 0) (om-load-inputfun (quote input-funbox) "a number" "SEED2" 1) (om-load-inputfun (quote input-funbox) "a number" "LIMIT" 10))) (om-make-point 303 329) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GEOMETRIC-SER" (quote geometric-ser) (quote ((om-load-inputfun (quote input-funbox) "seed" "SEED" 1) (om-load-inputfun (quote input-funbox) "factor" "FACTOR" 3) (om-load-inputfun (quote input-funbox) "limit" "LIMIT" 7))) (om-make-point 485 105) nil nil nil nil 1) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 16) (om-load-inputfun (quote input-funbox) "step" "STEP" 4))) (om-make-point 902 222) nil nil nil nil 1))) (quote ((6 0 5 1 nil 0) (7 0 6 0 nil 0) (9 0 7 1 nil 0) (28 0 9 0 nil 0) (8 0 9 1 nil 0) (10 0 12 0 nil 0) (13 0 12 1 nil 0) (11 0 13 0 nil 0) (14 0 15 0 nil 0) (23 3 18 0 nil 0) (23 2 19 0 nil 0) (23 1 20 0 nil 0) (23 0 21 0 ((om-make-point 834 448) (om-make-point 807 457) (om-make-point 806 480) (om-make-point 785 485)) 0) (22 0 23 0 nil 0) (26 0 27 0 nil 0) (25 0 27 1 nil 0) (24 0 27 2 nil 0))) nil 6.070004))
