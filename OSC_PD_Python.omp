; OM File Header - Saved 2013/11/04 16:17:48
; (6.070004 :patc (om-make-point 10 60) (om-make-point 0 0) (om-make-point 1002 652) "" 183 0 "2013/11/04 11:41:00" "2013/11/04 16:15:40")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "OSC_PD_Python" (quote ((om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 11 99) (om-make-point 357 142) (let ((newobj (when (find-class (quote chord-seq) nil) (let ((rep (make-instance (quote chord-seq) :lmidic (quote ((6800 6000 5600) (4800 6500 5300) (2900 8000 4100) (3600 6000 7200 7900) (6100 6600 4800) (6000) (5500) (4800 6800 3600) (2900))) :lonset (quote (0 1000 2000 3000 4236 4569 4917 5194 5542 6542)) :ldur (quote ((1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000 3000) (1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100 127) (100 100 100) (100) (100) (100 100 100) (100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0) (0) (0 0 0) (0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1) (1) (1 1 1) (1))) :legato 0))) (restore-tonalite rep (quote (((0 2) (make-instance (quote simple-tonalite) :tonnote (quote sol) :tonalt (quote diese) :mode (quote (0 200 400 500 700 900 1100))))))) rep)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0) (0) (0 0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((3) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((4) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((7) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 0 0) (om-make-point 633 329) 0 1000 nil 1 (quote :jackmidi) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gff) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "OSC-SEND" (quote osc-send) (quote ((om-load-inputfun (quote input-funbox) "OSC message" "BUNDLE" (list "/test" 0)) (om-load-inputfun (quote input-funbox) "IP address" "HOST" "127.0.0.1") (om-load-inputfun (quote input-funbox) "port number" "PORT" 3000))) (om-make-point 549 28) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 377 279) (om-make-point 52 32) "/om" "\"/om\"" nil) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 405 500) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 392 421) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 181 78) (quote "não entendi ainda$o server-receive -$como tratar as mensagens $que chegam? lambda?") "" (om-make-point 800 546) nil (om-make-color 0 0 0) (om-make-font "Bitstream Vera Sans" 12 :family "Bitstream Vera Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 294 271) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OSC-RECEIVE" (quote osc-receive) (quote ((om-load-inputfun (quote input-funbox) "port number" "PORT" 3333) (om-load-inputfun (quote input-funbox) "incoming message processing patch" "MSG-PROCESSING" "teste"))) (om-make-point 729 557) nil nil nil nil 1))) (quote ((3 0 1 0 nil 0) (4 0 3 0 nil 0) (2 0 4 0 nil 0) (6 0 4 1 nil 0) (0 1 6 0 nil 0))) nil 6.070004))
