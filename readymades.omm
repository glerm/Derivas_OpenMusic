; OM File Header - Saved 2013/11/11 14:53:32
; (6.070004 :maqt (om-make-point 226 10) (om-make-point 0 0) (om-make-point 1274 681) "" 182 0 "2013/11/11 2:19:56" "2013/11/11 2:29:56")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-maq2 "readymades" (quote ((om-load-tempobj1 "CHORD-SEQ 6" (quote nil) (list (quote yourobj) (let ((ominst (make-instance (quote ominstance) :name "CHORD-SEQ 6" :icon 138))) (setf (instance ominst) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 7600 8400) (6200) (6800) (7400) (5500) (8000) (9100) (9200) (10300) (7400 8600 8900) (9200) (9100) (5600) (5500) (7400) (4400) (3800) (5000 5500 7400))) :lonset (quote (0 75 125 200 250 350 400 525 625 750 800 875 925 1000 1100 1175 1275 1400 2400)) :ldur (quote ((1000 1000 1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000 1000 1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000 1000 1000))) :lvel (quote ((100 100 100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100 100) (100) (100) (100) (100) (100) (100) (100) (100 100 100))) :loffset (quote ((0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0))) :lchan (quote ((1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (doc ominst) (str-with-nl "")) (setf (edition-params ominst) (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil))) (setf (create-info ominst) (quote ("2013/11/11 2:27:02" "2013/11/11 2:29:56"))) ominst)) 1 32 2400 (om-make-color 0.5 0.6 0.5) nil t 20 98 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackmidi) 1 nil 1000 0 (om-make-point 705 428) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil nil nil "no documentation") (om-load-tempobj1 "CHORD-SEQ 3" (quote nil) (list (quote yourobj) (let ((ominst (make-instance (quote ominstance) :name "CHORD-SEQ 3" :icon 138))) (setf (instance ominst) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700 4500) (5100 2100 5200) (5100 6300 6300) (7500 6300) (5100) (6700 6400 5100) (9300 8200) (8200 2100 6900) (8800 6100) (8100 5200) (8100 5200))) :lonset (quote (0 125 375 500 625 750 1000 1250 1375 1500 1625 1750)) :ldur (quote ((250 250) (250 250 250) (125 125 125) (125 125) (125) (125 125 125) (125 125) (125 125 125) (125 125) (125 125) (125 125))) :lvel (quote ((100 100) (100 100 100) (100 100 100) (100 100) (100) (100 100 100) (100 100) (100 100 100) (100 100) (100 100) (100 100))) :loffset (quote ((0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1 1) (1 1 1) (1 1) (1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (doc ominst) (str-with-nl "")) (setf (edition-params ominst) (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil))) (setf (create-info ominst) (quote ("2013/11/11 2:24:41" "2013/11/11 2:29:56"))) ominst)) 1 2472 1750 (om-make-color 0.5 0.6 0.5) nil t 20 98 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackmidi) 1 nil 1000 0 (om-make-point 705 428) (om-make-point 0 0) 0 1 (quote :interval) (quote t) nil)) nil nil nil nil nil nil "no documentation") (om-load-tempobj1 "CHORD-SEQ 2" (quote nil) (list (quote yourobj) (let ((ominst (make-instance (quote ominstance) :name "CHORD-SEQ 2" :icon 138))) (setf (instance ominst) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500 5200) (7500 2800 5200) (7000 8200 4600) (7500 6300) (7500) (6000 7600 5800) (9300 8700) (8700 4000 6900) (7600 6600) (7600 6900) (7600 6900))) :lonset (quote (0 125 373 623 873 1123 1248 1373 1621 1871 2121 2371)) :ldur (quote ((250 250) (250 250 250) (125 125 125) (250 250) (250) (250 250 250) (125 125) (125 125 125) (125 125) (250 250) (250 250))) :lvel (quote ((100 100) (100 100 100) (100 100 100) (100 100) (100) (100 100 100) (100 100) (100 100 100) (100 100) (100 100) (100 100))) :loffset (quote ((0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1 1) (1 1 1) (1 1) (1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (doc ominst) (str-with-nl "")) (setf (edition-params ominst) (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil))) (setf (create-info ominst) (quote ("2013/11/11 2:21:40" "2013/11/11 2:29:56"))) ominst)) 1 4254 2371 (om-make-color 0.5 0.6 0.5) nil t 20 98 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 705 428) 0 1000 nil 1 (quote :jackmidi) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggf) 24 2)) nil nil nil nil nil nil "no documentation") (om-load-tempobj1 "CHORD-SEQ" (quote nil) (list (quote yourobj) (let ((ominst (make-instance (quote ominstance) :name "CHORD-SEQ" :icon 138))) (setf (instance ominst) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500 4500) (5100 4000 6400) (7000 8700 3900) (7000 4600) (7500) (7900 5700 5800) (7600 7000) (8700 2800 5200) (9300 4900) (5600 4700) (5700 4500))) :lonset (quote (0 250 500 625 750 1000 1250 1500 1750 2000 2250 2500)) :ldur (quote ((248 248) (250 250 250) (125 125 125) (250 250) (250) (125 125 125) (250 250) (250 250 250) (125 125) (250 250) (250 250))) :lvel (quote ((100 100) (100 100 100) (100 100 100) (100 100) (100) (100 100 100) (100 100) (100 100 100) (100 100) (100 100) (100 100))) :loffset (quote ((0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1 1) (1 1 1) (1 1) (1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((9) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (doc ominst) (str-with-nl "")) (setf (edition-params ominst) (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil))) (setf (create-info ominst) (quote ("2013/11/11 2:21:06" "2013/11/11 2:29:56"))) ominst)) 1 6653 2500 (om-make-color 0.5 0.6 0.5) nil t 20 98 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 0 0) (om-make-point 705 428) 0 1000 nil 1 (quote :jackmidi) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggf) 24 2)) nil nil nil nil nil nil "no documentation"))) (quote nil) (quote (0 10000 0 100)) (quote nil) (om-make-color 0.85 0.85 0.83) (quote ((4 60) ((4 4)) 16 t)) (quote nil) nil t "off" 6.070004 nil (quote (1)) (quote (1)) nil))
