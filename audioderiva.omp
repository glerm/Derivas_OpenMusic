; OM File Header - Saved 2013/11/12 13:13:45
; (6.070004 :patc (om-make-point 172 10) (om-make-point 50 50) (om-make-point 500 400) "" 183 0 "2013/11/12 13:02:40" "2013/11/12 13:13:45")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../../Estudos/fimdeoutrofim.wav"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "audioderiva" (quote ((om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 457 264) (om-make-point 48 32) 1000 "1000" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 364 239) (om-make-point 27 32) 0 "0" nil) (om-load-editor-box1 "fimdeoutrofim.wav 2" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 107 534) (om-make-point 811 176) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "home" "glerm" "Estudos")) :device nil :host nil :name "fimdeoutrofim" :type "wav") 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fimdeoutrofim.wav") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil)) t nil nil nil) (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound data pointer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil))) (om-make-point 430 421) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOUND-FADE" (quote sound-fade) (quote ((om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S" nil) (om-load-inputfun (quote input-funbox) "fade in duration (ms)" "IN" 100) (om-load-inputfun (quote input-funbox) "fade out duration (ms)" "OUT" 100))) (om-make-point 986 223) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOUND-CUT" (quote sound-cut) (quote ((om-load-inputfun (quote input-funbox) "a sound or sound-data pointer" "S" nil) (om-load-inputfun (quote input-funbox) "begin time (ms)" "BEG" 0) (om-load-inputfun (quote input-funbox) "end time (ms)" "END" 1000))) (om-make-point 299 317) nil nil nil nil 1) (om-load-editor-box1 "fimdeoutrofim.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 85 34) (om-make-point 811 176) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "home" "glerm" "Estudos")) :device nil :host nil :name "fimdeoutrofim" :type "wav") 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fimdeoutrofim.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil)) t nil nil nil))) (quote ((5 0 3 0 nil 0) (6 0 5 0 nil 0) (1 0 5 1 nil 0) (0 0 5 2 nil 0))) nil 6.070004))