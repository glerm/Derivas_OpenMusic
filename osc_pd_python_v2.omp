; OM File Header - Saved 2013/11/06 17:23:14
; (6.070004 :patc (om-make-point 110 225) (om-make-point 80 4) (om-make-point 1274 704) "" 183 0 nil "2013/11/06 17:23:14")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "osc_pd_python_v2" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 6 35) (om-make-point 440 32) (list (list 6800 6000 5600) (list 4800 6500 5300) (list 2900 8000 4100) (list 3600 6000 7200)) "((6800 6000 5600) (4800 6500 5300) (2900 8000 4100) (3600 6000 7200))" nil) (om-load-boxcomment "comment" (om-make-point 158 53) (quote "como filtrar para dentro$do patch?") "" (om-make-point 0 450) nil (om-make-color 0 0 0) (om-make-font "Bitstream Vera Sans" 12 :family "Bitstream Vera Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 75 350) (om-make-point 53 32) "pwd" "\"pwd\"" nil) (om-load-boxcall (quote genfun) "OM-SHELL" (quote om-shell) (quote ((om-load-inputfun (quote input-funbox) "a system command line" "STR" ""))) (om-make-point 51 380) nil nil nil nil 1) (om-load-editor-box1 "BUTTON 2" (quote button) (quote ((om-load-inputfun (quote input-funbox) "button text" "text" "click me") (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 628 25) (om-make-point 130 50) (let ((rep (om-make-dialog-item (quote button) (om-make-point 1 1) (om-make-point 110 27) "Filtra"))) rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 519 142) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 4" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 2))) (om-make-point 360 119) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE 2" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 491 423) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 595 378) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 536 389) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 560 500) (om-make-point 296 123) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6000 5300))) :lonset (quote (0 1000)) :ldur (quote ((1000 1000 1000))) :lvel (quote ((100 100 100))) :loffset (quote ((0 0 0))) :lchan (quote ((1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackmidi) 1 nil 1000 0 (om-make-point 730 321) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-boxcall (quote lispfun) "LIST 6" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 509 489) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 3))) (om-make-point 673 429) nil nil nil nil 1) (om-load-editor-box1 "BUTTON" (quote button) (quote ((om-load-inputfun (quote input-funbox) "button text" "text" "click me") (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 243 577) (om-make-point 130 50) (let ((rep (om-make-dialog-item (quote button) (om-make-point 1 1) (om-make-point 110 27) "Atualiza"))) rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote lispfun) "LIST 5" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 573 224) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 533 284) (om-make-point 52 32) "/om" "\"/om\"" nil) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 684 199) (om-make-point 48 30) 3333 "3333" nil) (om-load-boxcall (quote abstraction) "osc-handler" (om-load-patch-abs1 "osc-handler" (quote ((om-load-boxout "output 2" 1 (om-make-point 209 227) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 145 129) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 151 210) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "message" 0 (om-make-point 5 45) "" "message" nil nil))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (1 0 2 0 nil 0))) 6.070004 nil "" (om-make-point 0 0) (om-make-point 400 385)) (quote ((om-load-inputfun (quote input-funbox) "" "message" nil))) (om-make-point 783 108) nil nil "l" "osc-handler") (om-load-boxcall (quote genfun) "OSC-RECEIVE" (quote osc-receive) (quote ((om-load-inputfun (quote input-funbox) "port number" "PORT" 3000) (om-load-inputfun (quote input-funbox) "incoming message processing patch" "MSG-PROCESSING" nil))) (om-make-point 723 246) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 11 99) (om-make-point 294 140) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800 6000 5600) (4800 6500 5300) (2900 8000 4100) (3600 6000 7200))) :lonset (quote (0 1000 2000 3000 4000)) :ldur (quote ((1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx palette-mode)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 0 0) (om-make-point 633 329) 0 1000 nil 1 (quote :jackmidi) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gff) 24 2 0)) t nil nil nil) (om-load-boxcall (quote genfun) "OSC-SEND" (quote osc-send) (quote ((om-load-inputfun (quote input-funbox) "OSC message" "BUNDLE" (list "/test" 0)) (om-load-inputfun (quote input-funbox) "IP address" "HOST" "127.0.0.1") (om-load-inputfun (quote input-funbox) "port number" "PORT" 3000))) (om-make-point 509 28) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 397 347) nil nil nil nil 1))) (quote ((2 0 3 0 nil 0) (5 0 4 1 nil 0) (20 0 5 0 nil 0) (14 0 6 0 nil 0) (9 0 7 0 nil 0) (12 0 8 0 nil 0) (8 0 9 0 nil 0) (11 0 10 1 nil 0) (7 0 11 0 nil 0) (18 0 12 0 nil 0) (10 0 13 1 nil 0) (15 0 14 0 nil 0) (21 0 14 1 nil 0) (16 0 18 0 nil 0) (17 0 18 1 nil 0) (0 0 19 1 nil 0) (6 0 20 0 nil 0) (19 1 21 0 ((om-make-point 75 237) (om-make-point 144 263) (om-make-point 406 292) (om-make-point 406 347)) 0))) nil 6.070004))
