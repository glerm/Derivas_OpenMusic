; OM File Header - Saved 2013/11/10 15:42:53
; (6.070004 :patc (om-api:om-make-point 226 10) (om-api:om-make-point 0 0) (om-api:om-make-point 1274 658) "" 183 0 "2013/11/05 20:25:32" "2013/11/10 15:35:29")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Tetracordes" (quote ((om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 582 108) (om-make-point 81 181) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500 5900 8100 9500)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 0 0) (om-make-point 497 389) 0 1000 nil 1 (quote :jackmidi) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 357 78) (quote "Tetracordes") "" (om-make-point 464 4) nil (om-make-color 0.0S0 0.0S0 0.0S0) (om-make-font "Courier 10 Pitch" 48.0D0 :family "Courier 10 Pitch" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 100)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 581 334) (om-make-point 170 266) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4700) (5300) (6900) (7100) (7700) (8300) (9300) (10700) (10700) (9300) (8300) (7700) (7100) (6900) (5300) (4700))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 2500)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 630 396) 0 1000 nil 1 (quote :jackmidi) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "arpejador-2oitavas" (om-load-patch-abs1 "arpejador-2oitavas" (quote ((om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 225 219) (om-make-point 48 32) 1200 "1200" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 105 139) (om-make-point 48 32) 1200 "1200" nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 127 553) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1200))) (om-make-point 113 240) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1200))) (om-make-point 165 251) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "APPEND 2" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 88 347) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 296 353) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 280 288) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 209 405) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 115 448) nil nil nil nil 1))) (quote ((10 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 4 1 nil 0) (2 0 5 0 ((om-make-point 21 103) (om-make-point 172 105) (om-make-point 172 177) (om-make-point 172 251)) 0) (0 0 5 1 nil 0) (4 0 6 1 nil 2) (5 0 6 2 nil 11) (8 0 7 0 nil 0) (6 0 8 0 nil 0) (7 0 9 0 nil 0) (7 0 10 0 nil 0) (9 0 10 1 nil 0))) 6.070004 nil "" (om-make-point 200 200) (om-make-point 1280 727)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 752 217) nil (list (list 4700 5300 6900 7100 7700 8300 9300 10700 10700 9300 8300 7700 7100 6900 5300 4700)) nil "arpejador-2oitavas") (om-load-editor-box1 "BUTTON" (quote button) (quote ((om-load-inputfun (quote input-funbox) "button text" "text" "click me") (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 1046 603) (om-make-point 130 50) (let ((rep (om-make-dialog-item (quote button) (om-make-point 1 1) (om-make-point 110 27) "gerar acorde"))) rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 836 98) (om-make-point 192 32) (list "0" "1" "2" "3" "4" "5" "6" "7") "(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\")" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 486 580) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 6" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 295 594) nil nil nil nil 1) (om-load-boxcall (quote genfun) "N->MC 4" (quote n->mc) (quote ((om-load-inputfun (quote input-funbox) "note name or list of note names" "STRS" (list "C3")))) (om-make-point 440 488) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 5" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 451 430) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "STRING+ 4" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 440 370) nil nil nil nil 1) (om-load-editor-box1 "SINGLE-ITEM-LIST 8" (quote single-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres")))) (om-make-point 404 19) (om-make-point 50 324) (let ((rep (om-make-dialog-item (quote single-item-list) (om-make-point 1 1) (om-make-point 34 291) "untitled" :range (quote ("C" "C#" "D" "Eb" "E" "F" "F#" "G" "Ab" "A" "Bb" "B"))))) (setf (di-data rep) (quote ("C" "C#" "D" "Eb" "E" "F" "F#" "G" "Ab" "A" "Bb" "B"))) (om-set-selected-item-index rep 11) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-editor-box1 "SINGLE-ITEM-LIST 7" (quote single-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres")))) (om-make-point 456 95) (om-make-point 32 219) (let ((rep (om-make-dialog-item (quote single-item-list) (om-make-point 1 1) (om-make-point 16 186) "untitled" :range (quote ("0" "1" "2" "3" "4" "5" "6" "7"))))) (setf (di-data rep) (quote ("0" "1" "2" "3" "4" "5" "6" "7"))) (om-set-selected-item-index rep 5) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote genfun) "N->MC 3" (quote n->mc) (quote ((om-load-inputfun (quote input-funbox) "note name or list of note names" "STRS" (list "C3")))) (om-make-point 325 485) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 336 427) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "STRING+ 3" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 325 367) nil nil nil nil 1) (om-load-editor-box1 "SINGLE-ITEM-LIST 6" (quote single-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres")))) (om-make-point 289 16) (om-make-point 50 324) (let ((rep (om-make-dialog-item (quote single-item-list) (om-make-point 1 1) (om-make-point 34 291) "untitled" :range (quote ("C" "C#" "D" "Eb" "E" "F" "F#" "G" "Ab" "A" "Bb" "B"))))) (setf (di-data rep) (quote ("C" "C#" "D" "Eb" "E" "F" "F#" "G" "Ab" "A" "Bb" "B"))) (om-set-selected-item-index rep 9) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-editor-box1 "SINGLE-ITEM-LIST 5" (quote single-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres")))) (om-make-point 341 92) (om-make-point 33 222) (let ((rep (om-make-dialog-item (quote single-item-list) (om-make-point 1 1) (om-make-point 17 189) "untitled" :range (quote ("0" "1" "2" "3" "4" "5"))))) (setf (di-data rep) (quote ("0" "1" "2" "3" "4" "5"))) (om-set-selected-item-index rep 4) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote genfun) "N->MC 2" (quote n->mc) (quote ((om-load-inputfun (quote input-funbox) "note name or list of note names" "STRS" (list "C3")))) (om-make-point 222 486) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 233 428) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "STRING+ 2" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 222 368) nil nil nil nil 1) (om-load-editor-box1 "SINGLE-ITEM-LIST 4" (quote single-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres")))) (om-make-point 186 17) (om-make-point 50 324) (let ((rep (om-make-dialog-item (quote single-item-list) (om-make-point 1 1) (om-make-point 34 291) "untitled" :range (quote ("C" "C#" "D" "Eb" "E" "F" "F#" "G" "Ab" "A" "Bb" "B"))))) (setf (di-data rep) (quote ("C" "C#" "D" "Eb" "E" "F" "F#" "G" "Ab" "A" "Bb" "B"))) (om-set-selected-item-index rep 11) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-editor-box1 "SINGLE-ITEM-LIST 3" (quote single-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres")))) (om-make-point 238 93) (om-make-point 35 172) (let ((rep (om-make-dialog-item (quote single-item-list) (om-make-point 1 1) (om-make-point 19 139) "untitled" :range (quote ("0" "1" "2" "3" "4" "5"))))) (setf (di-data rep) (quote ("0" "1" "2" "3" "4" "5"))) (om-set-selected-item-index rep 2) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote genfun) "N->MC" (quote n->mc) (quote ((om-load-inputfun (quote input-funbox) "note name or list of note names" "STRS" (list "C3")))) (om-make-point 107 483) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 118 425) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "STRING+" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 107 365) nil nil nil nil 1) (om-load-editor-box1 "SINGLE-ITEM-LIST 2" (quote single-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres")))) (om-make-point 71 14) (om-make-point 50 324) (let ((rep (om-make-dialog-item (quote single-item-list) (om-make-point 1 1) (om-make-point 34 291) "untitled" :range (quote ("C" "C#" "D" "Eb" "E" "F" "F#" "G" "Ab" "A" "Bb" "B"))))) (setf (di-data rep) (quote ("C" "C#" "D" "Eb" "E" "F" "F#" "G" "Ab" "A" "Bb" "B"))) (om-set-selected-item-index rep 5) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-editor-box1 "SINGLE-ITEM-LIST" (quote single-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres")))) (om-make-point 123 90) (om-make-point 35 172) (let ((rep (om-make-dialog-item (quote single-item-list) (om-make-point 1 1) (om-make-point 19 139) "untitled" :range (quote ("0" "1" "2" "3" "4" "5"))))) (setf (di-data rep) (quote ("0" "1" "2" "3" "4" "5"))) (om-set-selected-item-index rep 3) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 827 4) (om-make-point 326 32) (list "C" "C#" "D" "Eb" "E" "F" "F#" "G" "Ab" "A" "Bb" "B") "(\"C\" \"C#\" \"D\" \"Eb\" \"E\" \"F\" \"F#\" \"G\" \"Ab\" \"A\" \"Bb\" \"B\" )" nil))) (quote ((6 0 0 1 nil 0) (3 0 2 1 ((om-make-point 808 283) (om-make-point 808 309) (om-make-point 778 309) (om-make-point 619 334)) 0) (0 1 3 0 ((om-make-point 604 287) (om-make-point 648 317) (om-make-point 707 212) (om-make-point 810 212) (om-make-point 810 217)) 0) (2 0 4 1 nil 0) (7 0 6 0 ((om-make-point 313 636) (om-make-point 406 636) (om-make-point 424 620) (om-make-point 441 610) (om-make-point 499 580)) 0) (23 0 7 0 nil 0) (18 0 7 1 ((om-make-point 242 532) (om-make-point 310 549) (om-make-point 311 563) (om-make-point 311 594)) 0) (13 0 7 2 nil 0) (8 0 7 3 ((om-make-point 460 534) (om-make-point 460 564) (om-make-point 354 567) (om-make-point 327 594)) 0) (9 0 8 0 nil 0) (10 0 9 0 nil 0) (11 0 10 0 nil 0) (12 0 10 1 nil 0) (5 0 12 0 nil 0) (14 0 13 0 nil 0) (15 0 14 0 nil 0) (16 0 15 0 nil 0) (17 0 15 1 nil 0) (19 0 18 0 nil 0) (20 0 19 0 nil 0) (21 0 20 0 nil 0) (22 0 20 1 nil 0) (24 0 23 0 nil 0) (25 0 24 0 nil 0) (26 0 25 0 nil 0) (27 0 25 1 nil 0))) nil 6.070004))
