; OM File Header - Saved 2013/11/10 16:06:41
; (6.070004 :patc (om-api:om-make-point 226 10) (om-api:om-make-point 0 0) (om-api:om-make-point 1274 635) "" 183 0 "2013/11/07 23:21:41" "2013/11/10 16:06:41")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "loops_e_lambdas" (quote ((om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 836 286) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "sorteia-ritmos 2" (om-load-patch-abs1 "sorteia-ritmos" (quote ((om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 378 325) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 1) (om-load-inputfun (quote input-funbox) "max" "HIGH" 10))) (om-make-point 365 232) nil nil nil nil 1) (om-load-boxout "output 2" 1 (om-make-point 323 430) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output" 0 (om-make-point 194 487) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input 2" 1 (om-make-point 193 13) "" nil nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 138 140) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 201 88) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 205 208) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 209 393) nil nil nil nil 1))) (quote ((8 0 0 0 nil 0) (1 0 0 1 nil 0) (0 0 2 0 nil 0) (9 0 3 0 nil 0) (5 0 6 0 nil 0) (4 0 7 0 nil 0) (6 0 8 0 nil 0) (7 0 8 1 nil 0) (8 0 9 1 nil 0))) 6.070004 nil "" (om-make-point 0 0) (om-make-point 501 500)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 889 328) (om-make-point 87 68) (list (list 0 125 375 625 875 1125 1375 1500 1750 1875 2125 2375) (list 1125 2250 2250 2250 1125 1125 2250 2232 2232 1125 2250)) nil "sorteia-ritmos") (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 916 463) (om-make-point 92 32) (list 75 125 100) "(75 125 100)" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1157 222) (om-make-point 85 32) (list 75 50 100) "(75 50 100)" nil) (om-load-boxcall (quote abstraction) "sorteia-ritmos" (om-load-patch-abs1 "sorteia-ritmos" (quote ((om-load-boxout "output" 0 (om-make-point 194 487) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input 2" 1 (om-make-point 193 13) "" nil nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 138 140) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 201 88) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 205 208) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 209 393) nil nil nil nil 1))) (quote ((6 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 4 0 nil 0) (3 0 5 0 nil 0) (4 0 5 1 nil 0) (5 0 6 1 nil 0))) 6.070004 nil "" (om-make-point 0 0) (om-make-point 1274 658)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 1121 313) nil (list (list 0 50 150 200 300 350 450 550 600 675 725 775 875 975 1075 1125 1175 1250 1300 1350)) nil "sorteia-ritmos") (om-load-editor-box1 "CHORD-SEQ 6" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 75)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1064 467) (om-make-point 146 172) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 7600 8400) (6200) (6800) (7400) (5500) (8000) (9100) (9200) (10300) (7400 8600 8900) (9200) (9100) (5600) (5500) (7400) (4400) (3800) (5000 5500 7400))) :lonset (quote (0 50 150 200 300 350 450 550 600 675 725 775 875 975 1075 1125 1175 1250 2250)) :ldur (quote ((1000 1000 1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000 1000 1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000 1000 1000))) :lvel (quote ((100 100 100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100 100) (100) (100) (100) (100) (100) (100) (100) (100 100 100))) :loffset (quote ((0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0))) :lchan (quote ((1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackmidi) 1 nil 1000 0 (om-make-point 705 428) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 75)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1103 32) (om-make-point 146 172) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 7600 8400) (6200) (6800) (7400) (5500) (8000) (9100) (9200) (10300) (7400 8600 8900) (9200) (9100) (5600) (5500) (7400) (4400) (3800) (5000 5500 7400))) :lonset (quote (0 75 150 225 300 375 450 525 600 675 750 825 900 975 1050 1125 1200 1275 2275)) :ldur (quote ((1000 1000 1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000 1000 1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000 1000 1000))) :lvel (quote ((100 100 100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100 100) (100) (100) (100) (100) (100) (100) (100) (100 100 100))) :loffset (quote ((0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0))) :lchan (quote ((1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackmidi) 1 nil 1000 0 (om-make-point 705 428) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-boxcall (quote abstraction) "acorde-ou-nota?" (om-load-patch-abs1 "acorde-ou-nota?" (quote ((om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 217 173) (om-make-point 55 32) "nota" "\"nota\"" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 112 123) (om-make-point 69 32) "acorde" "\"acorde\"" nil) (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 73 265) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 138 315) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 14 62) "" nil nil nil) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 138 221) (om-make-point 33 58) nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 57 200) nil nil nil nil 1))) (quote ((6 0 2 0 nil 0) (5 0 3 0 nil 0) (2 0 5 0 nil 0) (1 0 5 1 nil 0) (0 0 5 2 nil 0) (4 0 6 0 nil 0))) 6.070004 nil "" (om-make-point 0 0) (om-make-point 500 377)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 569 142) nil nil "l" "acorde-ou-nota?") (om-load-boxcall (quote abstraction) "permuta-acordes-notas-separadamente" (om-load-patch-abs1 "permuta-acordes-notas-separadamente" (quote ((om-load-boxcall (quote genfun) "NTH-RANDOM 2" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 337 39) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 367 9) (om-make-point 146 32) (list 1200 -1200 700 -500) "(1200 -1200 700 -500)" nil) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 252 72) (om-make-point 81 35) nil "l" nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 145 87) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 205 160) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 383 176) (om-make-point 92 32) (list 1200 -1200) "(1200 -1200)" nil) (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 350 206) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 73 265) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 138 315) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 14 62) "" nil nil nil) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 138 221) (om-make-point 33 58) nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 57 200) nil nil nil nil 1))) (quote ((1 0 0 0 nil 0) (0 0 2 0 nil 0) (2 0 3 0 ((om-make-point 290 105) (om-make-point 226 105) (om-make-point 226 82) (om-make-point 206 49) (om-make-point 162 87)) 0) (9 0 3 1 nil 0) (9 0 4 0 nil 0) (6 0 4 1 nil 0) (5 0 6 0 nil 0) (11 0 7 0 nil 0) (10 0 8 0 nil 0) (7 0 10 0 nil 0) (3 0 10 1 nil 0) (4 0 10 2 nil 0) (9 0 11 0 nil 0))) 6.070004 nil "" (om-make-point 0 0) (om-make-point 1274 520)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 661 171) nil nil "l" "permuta-acordes-notas-separadamente") (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 762 305) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 75)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 827 20) (om-make-point 226 171) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 5700) (6300 3300 5700) (6300 7500 5100) (6300 5100) (6300) (7200 6900 6300) (8100 7500) (7500 3300 5700) (8100 5400) (6900 5700))) :lonset (quote (0 250 500 750 875 1000 1125 1250 1500 1750 1998)) :ldur (quote ((248 248) (248 498 498) (248 623 248) (123 248) (623) (61 60 248) (60 123) (248 498 498) (248 248) (248 248))) :lvel (quote ((69 69) (69 95 90) (95 90 69) (95 69) (69) (69 69 69) (69 69) (69 95 90) (69 69) (69 69))) :loffset (quote ((0 0) (0 0 0) (0 0 0) (0 0) (0) (62 0 0) (63 0) (0 0 0) (0 0) (0 0))) :lchan (quote ((1 2) (1 2 2) (1 1 2) (1 2) (1) (1 1 2) (1 1) (1 2 2) (1 2) (1 2))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackmidi) 407/100 nil 1000 0 (om-make-point 705 428) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 75)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 610 448) (om-make-point 229 182) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800 6400) (5800 2100 4500) (5800 8200 4600) (5100 4600) (5100) (6700 5700 7000) (7600 6300) (8200 4500 4500) (8800 6100) (6400 6900) (6400 6900))) :lonset (quote (0 125 375 625 875 1123 1248 1498 1748 1873 1998 4248)) :ldur (quote ((1125 1125) (2250 2250 2250) (2250 2250 2250) (2250 2250) (1125) (1125 1125 1125) (2250 2250) (2232 2232 2232) (2232 2232) (1125 1125) (2250 2250))) :lvel (quote ((100 100) (100 100 100) (100 100 100) (100 100) (100) (100 100 100) (100 100) (100 100 100) (100 100) (100 100) (100 100))) :loffset (quote ((0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1 1) (1 1 1) (1 1) (1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackmidi) 1 nil 1000 0 (om-make-point 705 428) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1200))) (om-make-point 416 414) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "inverso" (om-load-patch-abs1 "inverso" (quote ((om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 130 184) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 89 54) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" -1))) (om-make-point 188 146) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 176 82) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 98 132) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 121 279) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 86 0) "" nil nil nil))) (quote ((4 0 0 0 nil 0) (2 0 0 1 nil 0) (6 0 1 0 nil 0) (3 0 2 0 nil 0) (1 0 3 0 nil 0) (1 0 4 0 nil 0) (0 0 5 0 nil 0))) 6.070004 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 594 304) nil (list (list 3800 2600 2000 1400 900 800 -300 -400 -1500 -1500 -400 -300 800 900 1400 2000 2600 3800)) nil "inverso") (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1200))) (om-make-point 656 353) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 510 289) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 209 279) (om-make-point 27 32) 2 "2" nil) (om-load-boxwithed1 (quote box-with-win) "transpoe-pos" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 68 257) nil nil nil (list (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 491 227) nil nil nil nil 1) (om-load-boxin "input 2" 1 (om-make-point 441 32) "" nil nil nil) (om-load-boxcall (quote lispfun) "PRINT 2" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 676 302) nil nil nil nil 1) (om-load-boxcall (quote genfun) "count 2" (quote counter) (quote ((om-load-inputfun (quote input-funbox) "things to count" "SOMETHING" nil))) (om-make-point 610 168) nil nil nil nil 3) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 248 90) (om-make-point 27 32) 0 "0" nil) (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 302 149) nil nil nil nil 1) (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 14 140) nil nil nil nil 1))) (setf (numouts box) 1) box) (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 86 312) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 877 173) nil nil nil nil 3) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 35 364) (om-make-point 48 32) 1900 "1900" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 18 249) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 3))) (om-make-point 198 173) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 203 238) (om-make-point 246 58) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 24 79) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 108 36) "" nil nil (om-make-point 36 60)) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 839 427) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 703 505) nil nil nil 0)) (quote ((3 1 0 0 nil 0) (3 0 2 0 nil 0) (6 0 3 0 nil 0) (0 0 5 0 nil 0) (1 0 5 1 nil 0) (13 0 6 0 nil 0) (12 0 7 0 nil 0) (12 0 8 0 nil 0) (6 0 10 0 nil 0) (9 0 10 1 nil 0) (5 0 11 0 nil 0) (4 0 11 1 nil 0) (11 0 12 0 nil 0) (10 0 12 1 nil 0) (6 0 12 2 nil 0) (14 0 13 0 nil 0) (8 1 15 0 nil 0) (7 0 16 0 nil 0) (8 0 16 1 ((om-make-point 886 231) (om-make-point 886 368) (om-make-point 790 430) (om-make-point 735 505)) 0) (2 0 16 2 nil 0))) 1 "transpoe-pos" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 75)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 51 53) (om-make-point 146 172) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3800) (5000) (5600) (6200) (6700) (6800) (7900) (8000) (9100) (9100) (8000) (7900) (6800) (6700) (6200) (5600) (5000) (3800))) :lonset (quote (0 75 150 225 300 375 450 525 600 675 750 825 900 975 1050 1125 1200 1275 2275)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.070004 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackmidi) 1 nil 1000 0 (om-make-point 705 428) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 323 259) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 75)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 56 348) (om-make-point 146 172) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((2600) (5700) (4400) (6900) (5500) (7500) (6700) (8700) (7900) (9800) (6800) (8600) (5600) (7400) (5000) (6300) (3800) (4500))) :lonset (quote (0 75 150 225 300 375 450 525 600 675 750 825 900 975 1050 1125 1200 1275 2275)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :jackmidi) 1 nil 1000 0 (om-make-point 705 428) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (quote ((11 2 0 0 ((om-make-point 900 189) (om-make-point 918 245) (om-make-point 906 279) (om-make-point 857 286)) 0) (0 0 1 0 nil 0) (11 2 1 1 ((om-make-point 900 189) (om-make-point 959 229) (om-make-point 979 297) (om-make-point 947 328)) 0) (3 0 4 0 nil 0) (6 2 4 1 nil 0) (6 1 5 1 nil 0) (4 0 5 2 nil 0) (8 0 10 0 nil 0) (11 1 10 1 nil 0) (10 0 12 1 nil 0) (1 0 12 2 nil 0) (1 1 12 3 nil 0) (18 0 13 0 nil 0) (16 0 14 0 nil 0) (14 0 15 0 nil 0) (19 1 18 0 nil 0) (17 0 18 1 nil 0) (19 1 20 0 nil 0) (13 0 21 1 nil 0))) nil 6.070004))
